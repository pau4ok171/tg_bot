from commands import CommandManager
from tg_bot import TelebotManager

cm = CommandManager()
tg = TelebotManager()


if __name__ == '__main__':
    tg.main()


# 1.0.4
# TODO: Сделать возможным каждому пользователю видеть свою личную статистику
#   (Создать новую бд с действиями пользователей -
#   разбитие по user_id, book_id, started, finished, added, updated)
# TODO: Возвращать пользователя на сохр страницу в случае отмены(К книгам) напр. через бд
# TODO: Handler всех хандлеров для перехвата базовых элементов?

# 1.0.5
# TODO: Сделать карточку книги текстом (Название, автор, кол-во стр, язык, счет, место в жанре)
# TODO: Селектор ТОП-10 по жанрам(все, языки, ...), языкам(все, ру, ...)

# 1.0.6
# TODO: Длительность сессии в бд (лимит-1мин)
# TODO: Возможность отменять действия при добавление книги(в менеджере книг)
# TODO: Уведомление пользователю о предоставлении доступа
# TODO: Переработать таблицы для лучшей читабельности
# TODO: States через БД для избежания удаления при перезагрузке бота и разделения данных по message_id
#  (id/user_id/message_id/state_id/transact_id/date/genre/lang/new_user_access_level/added/updated)
#  (либо разделение бд по states)
#  (и при ненужности после совершения обновления или оставить для статистики)
#  (Отчищать бд от старых данных(напр. недельной давности)
# TODO: Рефакторинг





# 1.0.0
# DONE: Добавить кнопки для вывода(Прочитано по категориям,
#  Всего книг, Всего по категориям,
#  Среднее время чтения книг по категориям, Всего по языкам,
#  Прочитано по языкам, группировка по категориям и языкам)
# DONE: Унификация обработки ответа от БД
# DONE: Что прочитать
# DONE: Отправлять инфо только мне!!!
# DONE: Возможность находить книгу по id и делать ее прочитанной, указывая дату
# DONE: Добавить логи
# DONE: Форматирование
# DONE: Вывод в тг данных из DF?
# DONE: Разделить кнопки по логике
# DONE: Форматирование кнопок, переделать все в формат как в бот фазер
# DONE: Вывод послед таблицы по виду (Экономика - 20: Ру-10, Фр-5, Ис-5...)
# DONE: Развернуть код с бд на сервере
# DONE: БД уникальных пользователей с датой последнего обращения
# DONE: Собрать Админ-Панель со статистикой от других пользователей в отдельном хендлере
# DONE: Добавить разделение уровня доступа
# DONE: Обработка ошибок
# DONE: Добавить календарь и проверять логичность введенных данных(По базовому значению-сегодня)
# DONE: Установить мин дату - дату начала чтения книги
# DONE: Кнопка отмены и домой для календаря
# DONE: Удалять старое меню при вывозе старта
# (Удалять старое меню/показывать новое с тем-же меню/вставлять ответ на запрос пользователя)
# DONE: Сделать меню статичным, чтобы постоянно было в зоне видимости пользователя
# DONE: Спрашивать подтверждение для установки даты прочтения книги
# DONE: Защита от тех, кто уже получил доступ к ненужным данным
# 1.0.1
# DONE: Если слово отсутствует в таблице, использовать русский по умолчанию
#  (Проверить есть ли язык в списке поддерживаемых)
# DONE: Добавить поддержку на нескольких языках
# 1.0.2
# DONE: Сделать книгу читаемой находя её по id(По базовому значению дата начала чтения-сегодня)
#  (Построить в отдельном модуле конструктор для книг с навиг кнопками по 10 штук, с использованием либо ссылок, либо
#  callback кнопками по форме telebot-calender)
#  (В кнопке цифры вызывать меню из все кнопок, где пользователь может выбрать нужную страницу)
# DONE: Закончить перевод календаря
# DONE: В таблице со средним значением сверху выводить среднее по всем книгам
# DONE: Добавить меню с командами
# DONE: Вызывать все queries из command и передавать в database
# DONE: Добавить фильтры в handler
# DONE: Добавить команду /help с некоторыми данными (описание, версия, поддерживаемые языки, уровень доступа ...)
# DONE: Выводить в консоль уровень доступа (Константой)
# 1.0.3
# DONE: Рефакторинг хендлеров закончить
# DONE: Собрать собственный календарь
# DONE: TOP книг кнопками
# DONE: Выбрасывать данные не в чат, а прописывать в сообщение над кнопкой
#  (В том числе таблицы)
# DONE: Из хендлеров переместить все команды в отдельный модуль
#  (В хендлерах только вызывать команды ex: cm.start_menu())
# DONE: Marquer comme lu через пагинатор
# DONE: Разделить States по календарям
# DONE: Пагинация: ответом должна выдавать id книги. Все остальное должно делаться отдельно
# DONE: try: except: при ошибке book_id и пр.
# DONE: Проверить логику states
# DONE: Обнулять календарь при отмене
# DONE: Проверка уровня доступа через бд
# DONE: Сделать карточку пользователей (уровень доступа, имя, id, послед дата обр ...)
# DONE: С панели управления сделать возможность изменять уровень доступа к пользователям
#  (Добавить возможность выбирать с помощью pg
#  Переделать пагинацию для унификации -> Поменять books на transactions)



